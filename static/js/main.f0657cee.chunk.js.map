{"version":3,"sources":["component/MyFooter.jsx","component/MyPortfolio.jsx","component/MyHeader.jsx","App.js","serviceWorker.js","index.js"],"names":["MyFooter","id","className","src","alt","icon","faStreetView","href","faLinkedin","faGithubSquare","faEnvelopeSquare","MyPortfolio","props","listItems","project","map","item","key","name","link","img","tech","faAngleDoubleUp","onClick","setOpen","open","MyHeader","prjctLink","to","spy","smooth","delay","duration","faAngleDoubleDown","prjctClose","style","fontFamily","fontWeight","App","useState","isOpened","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4xCAKe,SAASA,IACtB,OACE,4BAAQC,GAAG,WACT,yBAAKC,UAAU,aACb,yBAAKC,IAAI,cAAcC,IAAI,KAC3B,yBAAKF,UAAU,QACb,8BACE,kBAAC,IAAD,CAAiBG,KAAMC,MADzB,oBAGA,uBAAGC,KAAK,0CACN,kBAAC,IAAD,CAAiBF,KAAMG,MADzB,aAGA,uBAAGD,KAAK,gCACN,kBAAC,IAAD,CAAiBF,KAAMI,MADzB,WAGA,uBAAGF,KAAK,gCACN,kBAAC,IAAD,CAAiBF,KAAMK,MADzB,a,YCfK,SAASC,EAAYC,GAClC,IAAMC,EAAYC,EAAQC,KAAI,SAACC,GAAD,OAC5B,yBAAKd,UAAU,OAAOe,IAAKD,EAAKE,MAC9B,uBAAGX,KAAMS,EAAKG,KAAMf,IAAKY,EAAKE,MAC5B,0BAAMhB,UAAU,QAAQc,EAAKE,OAE9BF,EAAKI,IAAM,yBAAKjB,IAAKa,EAAKI,IAAKhB,IAAI,KAAQ,yBAAKD,IAAI,mBAAmBC,IAAI,KAC5E,yBAAKF,UAAU,iBACb,4BAAKc,EAAKE,MACV,yBAAKhB,UAAU,cACb,oCAAUc,EAAKK,YAKvB,OACE,0BAAMpB,GAAG,WAAWC,UAAU,aAC3BW,EACD,kBAAC,IAAD,CACEX,UAAU,gBACVG,KAAMiB,IACNC,QAAS,WACPX,EAAMY,QAAQZ,EAAMa,U,YCtBf,SAASC,EAASd,GAC/B,IAAMe,EACJ,kBAAC,OAAD,CACEC,GAAI,WACJC,KAAK,EACLC,QAAQ,EACRC,MAAO,IACPC,SAAU,IACVT,QAAS,WACPX,EAAMY,QAAQZ,EAAMa,QAPxB,YAUY,GACV,kBAAC,IAAD,CAAiBpB,KAAM4B,OAIrBC,EAAatB,EAAMa,KACvBE,EAEA,4BACEQ,MAAO,CAAEC,WAAY,aAAcC,WAAY,KAC/Cd,QAAS,WACPX,EAAMY,QAAQZ,EAAMa,QAHxB,YAMY,GACV,kBAAC,IAAD,CAAiBpB,KAAMiB,OAI3B,OACE,gCACE,yBAAKpB,UAAU,mBACb,gDACA,kEACCgC,I,oCC/BM,SAASI,IAAO,IAAD,EACJC,oBAAS,GADL,mBACrBd,EADqB,KACfD,EADe,KAE5B,OACE,yBAAKtB,UAAU,OACb,kBAACwB,EAAD,CAAUD,MAAOA,EAAMD,QAASA,IAChC,kBAAC,WAAD,CAAUgB,SAAUf,GAClB,kBAACd,EAAD,CAAac,MAAOA,EAAMD,QAASA,KAErC,kBAACxB,EAAD,OCNcyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f0657cee.chunk.js","sourcesContent":["import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faGithubSquare, faLinkedin } from '@fortawesome/free-brands-svg-icons';\nimport { faEnvelopeSquare, faStreetView } from '@fortawesome/free-solid-svg-icons';\n\nexport default function MyFooter() {\n  return (\n    <footer id=\"contact\">\n      <div className=\"container\">\n        <img src=\"/imgs/0.jpg\" alt=\"\" />\n        <div className=\"info\">\n          <span>\n            <FontAwesomeIcon icon={faStreetView} /> Los Angeles, CA\n          </span>\n          <a href=\"https://www.linkedin.com/in/cjfaquino/\">\n            <FontAwesomeIcon icon={faLinkedin} /> LinkedIn\n          </a>\n          <a href=\"https://github.com/cjfaquino\">\n            <FontAwesomeIcon icon={faGithubSquare} /> GitHub\n          </a>\n          <a href=\"mailto:cjfaquino@outlook.com\">\n            <FontAwesomeIcon icon={faEnvelopeSquare} /> Email\n          </a>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","import { faAngleDoubleUp } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React from 'react';\nimport project from './projects.json';\n\nexport default function MyPortfolio(props) {\n  const listItems = project.map((item) => (\n    <div className=\"item\" key={item.name}>\n      <a href={item.link} alt={item.name}>\n        <span className=\"hide\">{item.name}</span>\n      </a>\n      {item.img ? <img src={item.img} alt=\"\" /> : <img src=\"/imgs/source.jpg\" alt=\"\" />}\n      <div className=\"item__overlay\">\n        <h3>{item.name}</h3>\n        <div className=\"item__body\">\n          <p>Tech: {item.tech}</p>\n        </div>\n      </div>\n    </div>\n  ));\n  return (\n    <main id=\"projects\" className=\"container\">\n      {listItems}\n      <FontAwesomeIcon\n        className=\"projectsClose\"\n        icon={faAngleDoubleUp}\n        onClick={() => {\n          props.setOpen(props.open);\n        }}\n      />\n    </main>\n  );\n}\n","import { faAngleDoubleDown, faAngleDoubleUp } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React from 'react';\nimport { Link } from 'react-scroll';\n\nexport default function MyHeader(props) {\n  const prjctLink = (\n    <Link\n      to={'projects'}\n      spy={true}\n      smooth={true}\n      delay={100}\n      duration={400}\n      onClick={() => {\n        props.setOpen(props.open);\n      }}\n    >\n      Projects {''}\n      <FontAwesomeIcon icon={faAngleDoubleDown} />\n    </Link>\n  );\n\n  const prjctClose = props.open ? (\n    prjctLink\n  ) : (\n    <button\n      style={{ fontFamily: 'Montserrat', fontWeight: 800 }}\n      onClick={() => {\n        props.setOpen(props.open);\n      }}\n    >\n      Projects {''}\n      <FontAwesomeIcon icon={faAngleDoubleUp} />\n    </button>\n  );\n\n  return (\n    <header>\n      <div className=\"jumbo container\">\n        <h1>Christian Aquino</h1>\n        <h4>Web Design & Front End Development</h4>\n        {prjctClose}\n      </div>\n    </header>\n  );\n}\n","import React, { useState } from 'react';\nimport MyFooter from './component/MyFooter';\nimport MyPortfolio from './component/MyPortfolio';\nimport MyHeader from './component/MyHeader';\nimport { Collapse } from 'react-collapse';\nimport 'fontsource-montserrat';\nimport 'fontsource-montserrat/800-normal.css';\nimport 'fontsource-montserrat/300-normal.css';\nimport './App.css';\n\nexport default function App() {\n  const [open, setOpen] = useState(false);\n  return (\n    <div className=\"App\">\n      <MyHeader open={!open} setOpen={setOpen} />\n      <Collapse isOpened={open}>\n        <MyPortfolio open={!open} setOpen={setOpen} />\n      </Collapse>\n      <MyFooter />\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}